#ifndef AAL_GRAPHS_SOLVER_H
#define AAL_GRAPHS_SOLVER_H

#include "Graph.h"
#include "Vertice.h"
#include <forward_list>
#include <ostream>
#include <chrono>
#include <fstream>

/**
 * @class
 * Class used in main() function.
 * Loads data from input stream.
 * Solves graph.
 * Prints results.
 */
class Solver {
    /// @see Graph
    std::shared_ptr<Graph> graph;
public:
    /// ----- CONSTRUCTORS -----

    /// Default constructor. Creates empty graph.
    Solver();

    /// Constructor copying graph reference
    explicit Solver(std::shared_ptr<Graph> graph);

    /// ----- GETTERS & SETTERS -----
    [[nodiscard]] const std::shared_ptr<Graph> &getGraph() const;


    ///   ---METHODS---
    /**
     * Process input stream with data about graph.
     * DATA FORMAT:
     * [source count]
     * [valve count]
     * [receiver count]
     * for each source:
     *      [source performance] list of: [adjacent valve/receiver index] [edge capacity]
     * for each valve:
     *      [valve capacity] list of: [adjacent valve/receiver index] [edge capacity]
    */
    void loadData(std::istream &stream);

    /**
     * Solves graph that is stored in Solver#graph.
     * Counts time of solving.
     * @returns time of computation in nanoseconds
     */
    long long solve();

    /**
     * Connects augmenting path marking vertices with color and parentVertice.
     * @return true if was able to find augmenting path
     */
    bool existsAugmentingPath();

    /**
     * Bases on Solver#existsAugmentingPath() markings.
     * Synchronizes flow and graph, according to Edmonds-Karp algorithm.
     */
    void synchronizeFlowAndGraph();

    /**
     * @see Generator
     * Compares results to original results generated by Generator from input stream.
     * @returns error - if some value differs by more than 1%, error in percent, otherwise 0
     */
    double compareResults(std::istream &);

    /// Print flows
    friend std::ostream &operator<<(std::ostream &os, const Solver &controller);

    ///   ---DESTRUCTOR---
    virtual ~Solver() {}

};


#endif //AAL_GRAPHS_SOLVER_H
